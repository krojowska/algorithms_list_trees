#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;
///////////////////////////////////
///// TABLICE cw:////////////
///////////////////////////////////

void swap(int x, int y, int tab[])
{
    int tmp=tab[x];
    tab[x]=tab[y];
    tab[y]=tmp;
}
void insertsort(int n, int tab[])
{
    int j,x;
    for(int i=1; i<n; i++)
    {
        x=tab[i];
        for(j=i-1; j>=0 && tab[j]>x; j--)
        {
            tab[j+1]=tab[j];
        }
        tab[j+1]=x;
    }
}
void shellsort(int n, int tab[])
{
    int h,i,x;
    for(h=1; h<n; h=3*h+1)
    h/=9;
    if(!h) h++;
    for(; h>0; h/=3)
    {
        for(int j=h; j<n; j++)
        {
            x=tab[j];
            for(i=j-h; i>=0 && x<tab[i]; i-=h)
            {
                tab[i+h]=tab[i];
            }
            tab[i+h]=x;
        }
    }
}
void mergesort(int i_p, int i_k, int p[], int d[]) //p - pomocnicza
{
  int i_s,i1,i2,i;

  i_s = (i_p + i_k + 1) / 2;
  if(i_s - i_p > 1) mergesort(i_p, i_s - 1, p,d);
  if(i_k - i_s > 0) mergesort(i_s, i_k,p,d);
  i1 = i_p; i2 = i_s;
  for(i = i_p; i <= i_k; i++)
    p[i] = ((i1 == i_s) || ((i2 <= i_k) && (d[i1] > d[i2]))) ? d[i2++] : d[i1++];
  for(i = i_p; i <= i_k; i++) d[i] = p[i];
}
void selectionsort(int n, int tab[])
{
    int k;
    for(int i=0; i<n; i++)
    {
        k=i;
        for(int j=i+1; j<n; j++)
        {
            if(tab[j]<tab[k])
            {
                k=j;
            }
        }
        swap(k, i, tab);
    }
}
void bubblesort(int n, int tab[])
{
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<n-1; j++)
        {
            if(tab[j]>tab[j+1])
            {
                swap(j, j+1, tab);
            }
        }
    }
}
void combsort (int n, int tab[])
{
    int gap=n;
    bool replace=true;
    while(gap>1 || replace)
    {
        gap=gap*10/13;
        if(gap==0)  gap=1;
        replace=false;
        for(int i=0; i+gap<n; i++)
        {
            if(tab[i+gap]<tab[i])
            {
                swap(i, i+gap, tab);
                replace=true;
            }
        }
    }
    bubblesort(n, tab);
}
int partition_lomuto(int tab[], int p, int r) ///wzgledem prawego elementu
{
    int x, i;
    x=tab[r];
    i=p-1;
    for(int j=p; j<=r-1; j++)
    {
        if(tab[j]<=x)
        {
            i++;
            swap(i,j,tab);
        }
    }
    swap(i+1, r, tab);

    return i+1;
}
int partition_hoare(int tab[], int p, int r) ///wzgledem prawego elementu
{
    int x, j,i;
    x=tab[p];
    j=r+1;
    i=p;
    while (true)
    {
        do
        {
            i++;
        }while(i<=r && tab[i]<x);
        do
        {
            j--;
        }while(tab[j]>x);

        if(i>j) break;

        swap(i, j, tab);
    }
    swap(j, p, tab);
    return j;

}
void quicksort(int tab[], int p, int r)
{
    int q;
    if(p<r)
    {
        q=partition_hoare(tab, p, r);
        quicksort(tab, p, q-1);
        quicksort(tab, q+1, r);
    }
}
void max_heapify (int tab[], int n, int i) ///shiftdown
{
    for(int largest=2*i; largest<=n; i=largest, largest=2*i)
    {
        if(largest+1<=n && tab[largest+1]>tab[largest]) largest++;
        if(tab[largest]<=tab[i]) return;
        swap(i, largest, tab);
    }
}
void build_max_heap(int tab[], int n) ///buildheapBU
{
    for(int i=n/2; i>0; i--)
    {
        max_heapify(tab, n, i);
    }
}
void min_heapify (int tab[], int n, int i) ///shiftup
{
    for(int f; f>1; i=f)
    {
        f=i/2;
        if(tab[f]>=tab[i]) return;
        swap(f, i tab);
    }
}
void build_min_heap(int tab[], int n)///buildheapBD
{
    for(int=2; i<=n; i++)
    {
        min_heapify(tab, n, i);
    }
}
void heapsort(int tab[], int n) ///indeksujemy od 1
{
    build_max_heap(tab,n);
    for(int i=n; i>1; i--)
    {
        swap(1, i, tab);
        n--;
        max_heapify(tab, n, 1); ///indeks zawsze 1 bo od roota porownujemy
    }
}
int main()
{
    srand(time(NULL));
    int rozmiar;
    cout<<"Podaj rozmiar: ";
    cin>>rozmiar;
    int t[rozmiar];
    //int tt[rozmiar];
    for(int i=0; i<rozmiar; i++)
    {
        t[i]=rand()%11+1;
    }
    for(int i=0; i<rozmiar; i++)
    {
        cout<<t[i]<<" ";
    }
    cout<<endl;
    //shellsort(rozmiar, t);
    //mergesort(0, rozmiar-1, t, tt);
    int p,q;
    p=0; q=rozmiar-1;
    quicksort(t,p,q);
    for(int i=0; i<rozmiar; i++)
    {
        cout<<t[i]<<" ";
    }

}
