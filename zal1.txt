#include <iostream>
#include <ctime>
#include <cmath>
#include <cstdlib>
using namespace std;
/////////////////////////////////////////
// 1 GRUPA ZAL///////
liste DB posortuj i scal
////////////////////////////////////////
struct node
{
  node *next;
  int data;
};
void add_front(node *&head, int v)
{
    node *p=new node;
    p->data=v;
    p->next=head;
    head=p;
}
void show(node *&head)
{
    node *p=head;
    while(p)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
}
int calc(node*&head)
{
    int ile=0;
    node *p=head;
    while (p)
    {
        ile++;
        p=p->next;
    }
    return ile;
}
void swap(node *&head, node *p) ///do bubbla
{
    node *q, *r;
    if(p==NULL)
    {
        q=head;
        r=head->next;
        q->next=r->next;
        r->next=q;
        head=r;
    }
    else
    {
        q=p->next;
        r=p->next->next;
        q->next=r->next;
        r->next=q;
        p->next=r;
    }
}
void bubblesort (node *&head)
{
    int suma=calc(head);
    for (int i=0; i<suma; i++)
    {
        node *p=NULL;
        node *q=head;
        if (q->data>q->next->data)
        {
            swap(head, p);
        }
        p=head;
        q=q->next;
        while(q->next)
        {
            if(q->data>q->next->data)
            {
                swap(head,p);
            }
            p=p->next;
            q=p->next;
        }
    }
}
void merge(node *&newhead, node *&head)
{
	node *p, *q;
	p = newhead;
	q = head;
    while(q)
    {
        p = newhead;
        if (newhead == NULL)
        {
            cout<<"Head jest nullem."<<endl;
            node *z = new node;
            z->data = q->data;
            z->next = NULL;
            newhead = z;
            q = q->next;
            continue;
        }
        p = newhead;
        if (p->data >= q->data)        // wstaw przed glowe
        {
            node *z = new node;
            z->data = q->data;
            z->next = p;
            newhead = z;
            q = q->next;
            continue;
        }
        p = newhead;
        node *r;
        r = p;
        while ( p->data <= q->data && p->next )
        {
            r = p;
            p = p->next;
        }
        if (p->data <= q->data)
        {
            node *z = new node;     //wstaw za p
            z->data = q->data;
            z->next = p->next;
            p->next = z;
            q = q->next;
            continue;
        }
        node *z = new node;     //wstaw za r przed p
        z->data = q->data;
        z->next = r->next;
        r->next = z;
        q = q->next;
        p = newhead;
    }
}
int main()
{
    node *H=NULL; ///nowa pusta lista (do merga)
    node **DB=new node*[10];
    for (int i=0; i<10; i++)
    {
        DB[i]=new node[4];
    }
    for (int i=0; i<10; i++)
    {
        for(int j=0; j<4; j++)
        {
            DB[i]=NULL;
        }
    }
    for (int i=0; i<10; i++)
    {
        for (int j=0; j<4; j++)
        {
            add_front(*&DB[i], rand()%10);
        }
    }
    for (int i=0; i<10; i++)
    {
        show(*&DB[i]);
        cout<<endl;
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////
    cout<<"PO BUBBLESORT: "<<endl;

    for (int i=0; i<10; i++)
    {
        bubblesort (*&DB[i]);
    }
    for (int i=0; i<10; i++)
    {
        show(*&DB[i]);
        cout<<endl;
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    cout<<"PO MERGE: "<<endl;
    for (int i=0; i<10; i++)
    {
        merge(*&H, *&DB[i]);
    }

        show(*&H);

    //////////////////////////////////////////////////////////////////////////////////////////////////////
}
